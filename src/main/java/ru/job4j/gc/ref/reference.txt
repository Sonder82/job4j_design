SoftReference
Главный плюс SoftReference в том, что JVM сама следит за тем нужно удалять из памяти объект или нет.
И если осталось мало памяти, то объект будет удален. Это именно то, что нам нужно при кэшировании.
Кэширование с использованием SoftReference может пригодиться в системах чувствительных к объему доступной памяти.
Например, обработка изображений. Наша система занимается обработкой изображений.
Допустим, у нас есть громадное изображение, которое находиться где-то в файловой системе
и это изображение всегда статично. Иногда пользователь хочет соединить это изображение с другим изображением.

Чтобы каждый раз не загружать с файловой системы изображение, будем кешировать загруженное изображение.
SoftReference поможет использовать кеширование, в критических ситуациях выгружать их из кэша для освобождения памяти.
Мы создаем много объектов, но на них ссылается безопасная ссылка. Но GC может начать работу GC и удалить данные.

Корректным использованием безопасных ссылок является сначала получение сильной ссылки на данные,
а потом работа с сильной ссылкой.
Это гарантирует, что в интервалах получения сильной ссылки из безопасной GC не затрет объект.


WeakReference

Запустился GC и определил что объект доступен только через weak-ссылки.
Сначала GC очистит weak-ссылку, то есть weakRef.get() – будет возвращать null.
Потом weakRef будет добавлен в queue и соответственно queue.poll() вернет ссылку на weakRef.
Когда GC определяет, что объект доступен только через weak-ссылки, то этот объект «сразу» удаляется с памяти.
Корректное использование этого типа ссылок аналогично безопасным.
Чтобы объекты, на которые ссылаются слабые ссылки не удалялись, на них должны быть сильные или безопасные ссылки.
